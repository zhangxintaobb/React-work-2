{"version":3,"sources":["work-1/search.js","work-1/header.js","work-1/todoItem.js","work-1/todo.js","work-1/content.js","work-1/App.js","Context/Context.js","request.js","Context/Child.js","Context/Parent.js","Hoc/Hoc.js","Portal/Portal.js","Portal/ParentPortal.js","index.js"],"names":["search","enterPress","event","key","props","target","value","type","onKeyPress","this","className","placeholder","required","autoComplete","Component","header","add","todoItem","checkboxCheck","item","status","id","clickDelete","onChange","checked","text","onClick","todo","console","log","list","title","filter","length","map","finish","delete","content","App","state","setState","preState","newTodo","Object","assign","push","Date","getTime","clear","con","React","createContext","Child","context","contextType","url","hoc","Com","Fetch","data","fetch","method","then","res","json","result","displayName","name","getDisplayName","Music","a","author","Music2","Mymusic","Mymusic2","Protal","handleClick","ReactDOM","createPortal","document","body","render","getElementById","createElement"],"mappings":"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","file":"static/js/main.d4486ee3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nexport default class search extends Component {\r\n    enterPress = (event)=>{\r\n        if(event.key==='Enter'){\r\n            this.props.enterPress(event.target.value)\r\n            event.target.value=''\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <input type=\"text\" onKeyPress={this.enterPress} className=\"search\"  placeholder=\"添加\" required=\"required\" autoComplete=\"off\"></input>\r\n        \r\n            \r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\nimport Search from './search'\r\nexport default class header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"header-content\">\r\n                    <div className=\"header-title\">ToDoList</div>\r\n                    <Search enterPress={this.props.add.add} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class todoItem extends Component {\r\n    checkboxCheck = () => {\r\n        this.props.item.status === 'working' && this.props.checkboxCheck(this.props.item.id)\r\n    }\r\n    clickDelete = () => {\r\n        this.props.clickDelete(this.props.item.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'ToDoItem' + (this.props.item.status === 'finished' ? ' ToDoItem-finish' : '')}>\r\n            <input type=\"checkbox\" onChange={this.checkboxCheck} checked={this.props.item.status === 'finished'} ></input>\r\n            <p>{this.props.item.text}</p>\r\n            <span onClick={this.clickDelete}>-</span> \r\n         </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// import React, { Component } from 'react'\r\n\r\n// export default class todoItem extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.handleDelete = this.handleDelete.bind(this)\r\n//       }\r\n//       // 子组件如果想和父组件通信，子组件要调用父组件传递过来的方法\r\n//       handleDelete() {\r\n//         // console.log(this.props.index)\r\n//         // this.props.delete(this.props.index) //代码优化\r\n//         const {deleteItem, index} = this.props\r\n//         deleteItem(index)\r\n//       }\r\n//       render() {\r\n//         const {content} = this.props\r\n//         return (<div onClick={this.handleDelete}>{content}</div>)\r\n//       }\r\n    \r\n// }\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './todoItem'\r\nimport './index.css'\r\nexport default class todo extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"list\">\r\n                <h2 className=\"list-title\">\r\n                    {console.log(this.props.todo.list)}\r\n                    {this.props.title}\r\n                    <span className=\"title-numb\">{this.props.todo.list.filter(item => {\r\n                    return item.status === this.props.status\r\n                }).length}</span>\r\n                </h2>\r\n                <div>\r\n                {\r\n                    this.props.todo.list.filter(item => {\r\n                        return item.status === this.props.status\r\n                    }).map(item => {\r\n                        return <TodoItem item={item} checkboxCheck={this.props.todo.finish} key={item.id} clickDelete={this.props.todo.delete}/>\r\n                    })\r\n                }\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nimport List from './todo'\r\nexport default class content extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"content\">\r\n                <List title=\"正在进行\" todo={this.props.todo.todo} status=\"working\"/>\r\n            <List title=\"已经完成\" todo={this.props.todo.todo} status=\"finished\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Header from './header'\r\nimport Content from './content'\r\nimport { Item } from 'rc-menu';\r\n\r\n// import './App.css'\r\n\r\nexport default class App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            todo:{\r\n                list:[],\r\n                add: (item) => { //添加一个todo\r\n                    this.setState(preState => {\r\n                      let newTodo = preState.todo\r\n                      let list = Object.assign([], newTodo.list)\r\n                      list.push({\r\n                        text: item,\r\n                        id: new Date().getTime(),\r\n                        status: 'working'\r\n                      })\r\n                      newTodo.list = list\r\n                      return {\r\n                        todo: newTodo\r\n                      }\r\n                    })\r\n                  },\r\n                  delete: (id) => { //删除一个todo\r\n                    this.setState(preState => {\r\n                      let newTodo = preState.todo\r\n                      let list = newTodo.list.filter(item => id !== item.id)\r\n                      newTodo.list = list\r\n                      return {\r\n                        todo: newTodo\r\n                      }\r\n                    })\r\n                  },\r\n                  finish: (id) => { //完成一个todo\r\n                    this.setState(preState => {\r\n                      let newTodo = preState.todo\r\n                      let list = newTodo.list.map(item => {\r\n                        if(item.id === id) {\r\n                          item.status = 'finished'\r\n                        }\r\n                        return item\r\n                      })\r\n                      newTodo.list = list\r\n                      return {\r\n                        todo: newTodo\r\n                      }\r\n                    })\r\n                  },\r\n                  clear: () => { //清空todo列表\r\n                    this.setState(preState => {\r\n                      let newTodo = preState.todo\r\n                      newTodo.list = []\r\n                      return {\r\n                        todo: newTodo\r\n                      }\r\n                    })\r\n                  }\r\n                }\r\n          \r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Header add={this.state.todo}>{console.log(this.state.todo.list)}</Header>\r\n                <Content todo={this.state}></Content>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nexport let con=React.createContext();","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n            .then((res)=>{\r\n                return res.json();\r\n            })\r\n            .then((res)=>{\r\n                this.setState({\r\n                    data: res.result\r\n                })\r\n                console.log(res);\r\n            })\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {con} from './Context'\r\n\r\nexport default class Child extends Component {\r\n    render() {\r\n        // console.log(this.context)\r\n        return (\r\n            <div>\r\n                Child组件\r\n                <div>{this.context}</div>\r\n                {/* <con.Consumer>\r\n                    {\r\n                        (id)=><div>{id}</div>\r\n                    }\r\n                </con.Consumer> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nChild.contextType=con;","import React, { Component } from 'react'\r\nimport Child from './Child';\r\n\r\nexport default class Parent extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.timeId = setInterval(()=>{\r\n            console.log(111);\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.timeId);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>{this.state.time}</h1>\r\n                Parent组件\r\n                <Child /> \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nlet url = 'https://api.apiopen.top/musicRankingsDetails?type=1';\r\nfunction getDisplayName(Com){\r\n    return Com.displayName || Com.name || 'Component';\r\n}\r\nfunction hoc(Com,url,title){\r\n    class Fetch extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data: []\r\n            }\r\n        }\r\n        componentDidMount() {\r\n            fetch(url,{method:'post'})\r\n                .then((res)=>res.json())\r\n                .then((res)=>{\r\n                    console.log(res);\r\n                    this.setState({\r\n                        data: res.result\r\n                    })\r\n                })\r\n        }\r\n        render(){\r\n            return (<div>\r\n                    <p>{title}</p>\r\n                    {/* 传递父组件的属性给子组件 */}\r\n                    <Com {...this.props} data={this.state.data}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    Fetch.displayName = `Fetch(${getDisplayName(Com)})`;\r\n    return Fetch;\r\n}\r\nclass Music extends Component{\r\n    render(){\r\n        return (\r\n            <ul>\r\n                <h1>{this.props.a}</h1>\r\n                {\r\n                    this.props.data.map(\r\n                        (item)=><li>\r\n                                <p>{item.title}</p>\r\n                                <p>{item.author}</p>\r\n                            </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nclass Music2 extends Component{\r\n    render(){\r\n        return (\r\n            <ul>\r\n                {\r\n                    this.props.data.map(\r\n                        (item)=><p>{item.title}</p>\r\n                    )\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nlet Mymusic = hoc(Music,url,'音乐');\r\nlet Mymusic2 = hoc(Music2,url,'新闻');\r\nexport default class Hoc extends Component {\r\n    \r\n    render() {\r\n        console.log(this);\r\n        return (\r\n            <div>\r\n               <Mymusic a='aa' b='bb'/> \r\n               <Mymusic2/> \r\n               <Mymusic2/> \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport default class Protal extends Component {\r\n    handleClick =()=>{\r\n        console.log('parentPortalclick')\r\n    }\r\n    render() {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                <div>\r\n                    <h1 onClick={this.handleClick}>Protal</h1>\r\n                </div>,\r\n                document.body                \r\n            )\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Portal from './Portal'\r\nexport default class parentPortal extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Portal />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import ShowTime from './ShowTime';\nimport Todolist from './work-1/App'\nimport requset from './request';\nimport Parent from './Context/Parent';\nimport Hoc from './Hoc/Hoc';\n// 组件交互\n// 父组件--->子组件：调用时在子组件上添加属性\n// 在子组件中通过props获取数据\n// let {Provider,Comsumer} = React.createContext();\nimport {con} from './Context/Context'\nimport ParentPortal from './Portal/ParentPortal';\n// import App from './App';\n// let color = 'red';\nReactDOM.render(\n    <Todolist />,\n    document.getElementById('root'));\n// ReactDOM.render(\n//     <con.Provider value={color}>\n//         <ParentPortal/>\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n\n\n\n// 函数定义组件（无生命周期函数）\n// 当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\nvar ele = React.createElement(\n    'div',\n    {'id':'box'},\n    'hello',\n    React.createElement(\n        'h1',\n        {'id':'h'},\n        'react'\n    )\n);\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: ['hello',{\n            type: 'h1',\n            props: {\n                id: 'h',\n                class: 'h',\n                children: ['react']\n            }\n        }]\n    }\n}\n\n// 自己声明render函数，实现页面渲染\nfunction render(obj,container){\n    var {type,props} = obj;\n    // 文档碎片\n    var fr = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item];\n        }else if(item === 'children'){\n            for(var i=0;i<props[item].length;i++){\n                if(typeof props[item][i] === 'object'){\n                    render(props[item][i],ele);\n                }else{\n                    var txt = document.createTextNode(props[item][i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fr.appendChild(ele);\n    container.appendChild(fr);\n}\n// render(obj,document.getElementById('root'));\n\n// 注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n// 1、node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 2、声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n// 4、文档碎片的概念"],"sourceRoot":""}